package com.ucsc.ir.searchengine.search;

import org.apache.lucene.analysis.compound.hyphenation.TernaryTree.Iterator;

import java.util.ArrayList;
import java.util.SortedSet;

/**
 * TODO: Insert description here. (generated by raghava)
 */
public class PositionAndTermContainer implements Comparable<PositionAndTermContainer>
{
  private Integer position;
  private String term;
  public PositionAndTermContainer(int position, String term)
  {
    this.position = position;
    this.term = term;
  }
  
  public String getTerm() {
    return this.term;  
  }

  public int getPosition() {
    return this.position;  
  }
  /* (non-Javadoc)
   * @see java.lang.Comparable#compareTo(java.lang.Object)
   */
  @Override
  public int compareTo(PositionAndTermContainer other) {
    // TODO(raghava): Auto-generated method stub
    return Integer.compare(this.position, other.position);
  }

  @Override
  public String toString() {
    return "'" +position + ":" + term + "', ";
  }
  
  public static ArrayList<Integer> getPositionDiffsBetweenDistinctTerms(
      SortedSet<PositionAndTermContainer> container1) {
    java.util.Iterator<PositionAndTermContainer> iter = container1.iterator();
    ArrayList<Integer> toReturn = new ArrayList<Integer>();
    int lastPosition = 0;
    String lastTerm = new String("");
    while (iter.hasNext()) {
      PositionAndTermContainer temp = iter.next();
      if (temp.getTerm().equals(lastTerm)) {
        lastPosition = temp.getPosition();
        continue;
      }
      
      // Only differences of less than 6 matter, rest are all identical.
      if (lastPosition != 0 && 
          ((temp.getPosition() - lastPosition) < 6)) {
        toReturn.add(temp.getPosition() - lastPosition);
      }
      lastPosition = temp.getPosition();
      lastTerm = temp.getTerm();
    }
/*    System.out.println("container1 = " + container1.toString());
    System.out.println("toReturn = " + toReturn.toString());*/
    return toReturn;
  }
}
